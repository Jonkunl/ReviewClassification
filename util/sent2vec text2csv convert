{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### This notebook is used to convert inferenced vector text file of sent2vec model to csv file.\n",
    "\n",
    "the breakline is the embedding for delimiter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "breakline = \"-0.64708 0.96257 -0.031607 -0.7155 -0.088663 0.64649 0.16937 -0.62243 0.13453 0.92349 -0.27725 -0.071278 0.014516 -0.89174 0.070288 -0.30987 -0.37839 0.37445 0.072245 -0.029924 -0.00045172 0.98654 -0.36373 0.15498 -0.83813 0.059882 -0.20925 0.23998 0.45425 1.1092 -0.31915 0.33454 0.24865 0.22779 -0.97397 0.21532 -0.14962 -0.30742 -0.74351 0.78705 0.13863 0.089609 -1.1984 -0.52175 -0.047064 0.095024 0.077192 -0.52905 0.14884 -1.0552 -0.32157 -0.26671 -0.2159 -0.78787 -0.59882 -0.31334 -0.15832 0.021739 0.14046 0.62597 0.19871 0.25391 -0.38659 0.30346 0.50192 -0.44664 -0.40963 0.28255 -0.14639 0.7122 0.023041 0.33729 0.86808 0.058642 -0.2234 0.51426 0.30867 -0.18297 -0.21679 -0.73413 -0.045531 -0.049892 0.45905 -0.35868 0.75542 -0.45154 -0.17319 -0.37797 0.073485 -0.6359 -0.63019 0.3166 -0.35657 -0.31429 0.54793 0.059476 -0.38777 0.50119 0.46391 -0.2391 0.24717 -0.80169 0.75245 -0.11983 0.53507 0.22099 -0.44825 0.19681 0.19425 0.054962 0.12414 -0.51967 0.26675 -0.5105 0.97948 0.58151 0.33238 0.52262 0.026121 0.11206 0.3408 -1.1781 0.28756 0.52165 -0.55596 0.74768 -0.14368 -0.46424 -0.29445 -0.68352 -0.65426 0.13892 -0.65457 0.16178 0.28561 0.17067 0.45571 0.44977 0.45214 -0.18484 -0.19454 -0.67974 1.323 0.13856 -0.84533 0.36075 0.037245 0.10099 0.63808 -0.093114 -0.025744 -0.93402 -0.609 -0.31313 0.16041 -0.82888 0.24935 0.15695 -0.029816 0.035702 -0.0739 -0.1714 0.046909 0.41375 -0.46251 0.0023772 0.010261 -0.34078 -0.030393 1.1508 -0.45077 -0.1277 -0.070395 -0.41138 -0.25112 -0.76767 0.13876 0.74226 -0.58642 0.058315 0.29383 0.23941 -0.35626 0.16241 0.20135 0.2348 -0.34055 0.35927 0.27457 0.1731 0.11975 -0.63447 -0.055829 -0.019322 -0.10882 -0.046291 0.61149 -0.15191 0.57079 0.48068 -0.43682 0.93827 0.1297 0.26211 0.44217 -0.92373 0.018599 0.071266 0.94816 -0.61182 0.40386 -1.1692 0.29469 -0.024635 0.5774 0.045894 -0.21377 0.097211 -0.12663 0.14322 0.60568 0.12725 0.26059 0.40575 0.39536 1.536 0.31019 0.1614 0.15294 -0.33699 -0.57837 -0.19298 -0.31703 0.14305 0.14927 -0.60634 0.24452 0.12247 -0.20557 0.25548 0.0659 -0.7909 0.59495 -0.17011 0.16926 0.28631 -0.28988 -0.34993 -0.0029981 0.32644 0.01594 0.62489 0.25188 0.55 0.0070167 -0.24592 0.18416 -0.040625 -0.32984 0.1814 -0.69439 0.64691 0.42551 0.28593 -0.96947 0.86265 0.3027 -0.36691 -0.26018 0.18399 0.99786 -0.17325 0.57493 0.22773 -0.22847 -0.63816 0.28965 0.59494 -0.17657 0.30283 0.30859 -0.38164 -0.46508 -0.16911 0.62072 0.16975 -0.40466 0.67392 0.20629 -0.38275 -0.17455 0.10483 -0.14889 -0.23849 -0.18843 -0.3765 -0.1619 0.76505 -0.1716 -0.093038 -0.34823 -0.14464 0.24747 -0.26251 0.50208 0.33236 0.21535 -0.23226 -0.092303 0.073538 -0.20626 0.30509 -0.016551 -0.82802 -0.72251 -0.11159 -0.17689 0.81302 0.38353 -0.33446 -0.32997 0.36801 0.20108 0.54392 -0.55176 -0.56433 0.57049 -0.23249 -0.19697 0.6361 -0.24338 0.48658 -0.57309 -0.77715 0.71658 0.08032 0.078541 0.45852 -0.4062 1.1535 0.085393 -0.93639 -0.3638 0.045467 -0.030589 0.21262 0.46169 -0.14648 0.55137 -0.20222 0.30187 -0.23063 -0.32561 0.025699 0.14069 -0.61448 -0.41221 0.18276 -0.71858 -0.91166 -0.16306 -0.55599 0.50008 0.21911 0.47802 0.30494 -0.32242 -1.0506 -0.63687 0.80301 0.67262 -0.1722 0.046591 0.23217 0.077976 0.75476 0.22425 0.82684 1.2612 -0.39204 0.4427 -0.29202 0.77978 -0.65314 -0.14831 -0.1397 -0.80505 -1.0685 0.50249 0.11374 0.32787 -0.53107 0.10145 0.42414 -0.062084 -0.23626 -0.1508 0.7865 0.25854 -0.17249 0.19279 -0.31989 -0.51421 0.70062 0.69054 0.45761 0.36437 -1.2279e-05 0.62054 -0.89543 0.4943 0.14912 -0.12588 -0.081419 -0.40385 -1.4126 1.3688 -0.14427 -0.6138 1.2981 -1.0775 0.28994 0.20546 -0.38752 0.55235 0.63918 0.47805 0.46166 -0.17722 0.50431 0.04973 -0.5219 -0.86094 -0.10281 -0.023102 0.86122 0.07237 0.92387 -0.8884 -0.38586 -0.178 0.44231 -0.070576 -0.14222 0.41532 0.53562 -0.068182 0.04504 -0.78652 -0.0076303 0.31351 -0.8736 0.41568 -0.10379 -0.29362 0.50586 -0.14405 0.17922 0.24286 -0.015625 -0.13168 0.1985 -0.41514 0.42505 -0.26886 -0.15141 0.41642 -0.012613 -0.41194 -0.30996 0.09552 1.3068 0.35124 -0.51083 -0.42783 -0.4952 -0.22285 -0.62605 -0.33709 0.60349 -0.32952 -0.17139 0.98442 0.3743 0.38854 0.26131 -1.6037 -0.62809 -0.045802 0.18905 0.58309 0.31474 0.16777 0.41756 -0.99458 -1.0191 0.29993 0.41621 0.30659 -0.78219 -0.38435 0.79351 -0.55722 -0.26191 0.56386 -0.56676 -0.26983 -0.18749 -0.49433 0.61754 0.093284 0.5361 -0.27399 -0.3619 0.431 0.26266 0.29159 0.1268 -0.1502 -0.24462 0.2491 0.40137 0.43248 0.36915 -0.74865 0.43086 0.80702 -0.3385 -0.73322 -0.14683 0.41697 0.17934 0.0095321 -0.67832 -0.051869 0.59938 0.2369 0.32459 0.29097 0.29574 -0.31722 -0.69518 0.82153 -0.059302 -0.25326 -0.22795 0.40554 -0.033113 -0.22835 0.34122 -0.69201 -0.37647 -0.41339 0.23591 0.47859 0.48223 1.217 -0.26816 -0.050121 -0.31458 -0.58182 -0.43253 -0.010771 0.046667 -0.28134 -0.59514 0.15422 -0.31207 -0.15459 -0.56994 0.022655 -0.80951 -0.1077 0.43269 -0.1174 -0.26831 -0.75204 0.57154 -1.2367 -0.53855 0.48726 -0.062141 0.59806 -0.44946 0.52431 -0.79559 0.073123 0.075162 0.5023 -0.1083 0.011651 -0.29363 -0.11247 0.47453 0.10384 -0.47569 0.83195 0.002963 0.49857 -0.12282\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('../dataset/yelp/pretrain-s2v-valtest.txt', 'r') as vectors:\n",
    "    full_vec = vectors.readlines()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def str2float(float_string):\n",
    "    float_list = []\n",
    "    for x in float_string.split(' '):\n",
    "        float_list.append(float(x))\n",
    "    return float_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "vectorised_reviews = []\n",
    "sent_vec = []\n",
    "for vec in full_vec:\n",
    "    if vec.strip() != breakline:\n",
    "        sent_vec.append(str2float(vec.strip()))\n",
    "    else:\n",
    "        vectorised_reviews.append(sent_vec)\n",
    "        sent_vec = []"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### read the corresponding csv file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "df = pd.read_csv('../dataset/shoes/small_shoes.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_df = df[25000:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>review content</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>25000</td>\n",
       "      <td>0</td>\n",
       "      <td>A simple  clean style. These shoes are exactly...</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25001</td>\n",
       "      <td>1</td>\n",
       "      <td>My feet love these  sandals . Am on my fourth ...</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25002</td>\n",
       "      <td>2</td>\n",
       "      <td>They are cute. I had to return them because th...</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25003</td>\n",
       "      <td>3</td>\n",
       "      <td>This sandal is pretty comfy. I could have used...</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25004</td>\n",
       "      <td>4</td>\n",
       "      <td>Love these adorable  wedges . They are worth t...</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Unnamed: 0                                     review content  rating\n",
       "25000           0  A simple  clean style. These shoes are exactly...       5\n",
       "25001           1  My feet love these  sandals . Am on my fourth ...       5\n",
       "25002           2  They are cute. I had to return them because th...       4\n",
       "25003           3  This sandal is pretty comfy. I could have used...       5\n",
       "25004           4  Love these adorable  wedges . They are worth t...       5"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "np.set_printoptions(suppress=True)\n",
    "train_vectors = [np.mean(x, axis=0) for x in vectorised_reviews]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.15006825,  0.04359   , -0.08911325, -0.31188   , -0.158869  ,\n",
       "       -0.1096295 , -0.23610325,  0.0373985 , -0.4379425 ,  0.17018175,\n",
       "        0.04130175,  0.00450525, -0.102454  , -0.075199  ,  0.36284   ,\n",
       "        0.139937  , -0.424325  ,  0.1474305 , -0.458545  ,  0.1727725 ,\n",
       "        0.1111965 , -0.1871085 , -0.39262   , -0.07079822,  0.06836175,\n",
       "       -0.23056875, -0.217121  ,  0.1361425 ,  0.1938225 ,  0.1366415 ,\n",
       "        0.00838775,  0.17394425,  0.246664  ,  0.1051905 , -0.1279695 ,\n",
       "       -0.09184025,  0.3158425 , -0.19635625, -0.16197675,  0.312574  ,\n",
       "        0.3470375 ,  0.0254265 ,  0.1337873 , -0.1857675 ,  0.10357975,\n",
       "       -0.11665375,  0.070501  , -0.23481   ,  0.2219125 , -0.18208   ,\n",
       "        0.285395  ,  0.05017425, -0.1489285 , -0.10449725, -0.0079065 ,\n",
       "        0.4622925 , -0.1958045 , -0.08249025,  0.0167525 ,  0.198344  ,\n",
       "       -0.2986725 ,  0.17374725, -0.232886  , -0.12068325, -0.25986105,\n",
       "       -0.2869425 ,  0.168485  , -0.065455  , -0.03254805, -0.08927925,\n",
       "        0.100526  , -0.03623675, -0.323669  ,  0.4553775 ,  0.13227475,\n",
       "        0.04957175, -0.04857375, -0.2323855 , -0.04150767,  0.11481   ,\n",
       "        0.05462275,  0.485203  , -0.00081975, -0.1215243 , -0.04289725,\n",
       "        0.16686725,  0.01263422,  0.166763  , -0.23465   ,  0.02824325,\n",
       "        0.3636075 , -0.350872  ,  0.06889675, -0.2500795 , -0.099273  ,\n",
       "       -0.2451275 ,  0.09991725,  0.227483  ,  0.15706875,  0.13804825,\n",
       "        0.0304305 , -0.10202775, -0.088229  ,  0.06205475, -0.0531825 ,\n",
       "       -0.030527  ,  0.31622375, -0.23675475, -0.10365975, -0.01730675,\n",
       "        0.250425  , -0.08581525,  0.26275   ,  0.112689  , -0.16423625,\n",
       "        0.1505205 ,  0.03597675,  0.209915  ,  0.14094625, -0.2310175 ,\n",
       "        0.10713575,  0.32495775, -0.155872  ,  0.016495  ,  0.07035925,\n",
       "       -0.5707825 ,  0.20937875, -0.1255758 , -0.09648675, -0.143706  ,\n",
       "        0.11038425,  0.04567   ,  0.16592875,  0.02043075,  0.01099725,\n",
       "        0.13781273,  0.15557325,  0.03893775,  0.167826  ,  0.00994563,\n",
       "       -0.11894125, -0.088705  , -0.18282   ,  0.074081  , -0.2455675 ,\n",
       "       -0.107136  ,  0.0815992 , -0.11623908, -0.05574647,  0.14431   ,\n",
       "       -0.4614525 ,  0.1203595 , -0.21492378,  0.3826675 , -0.05491525,\n",
       "        0.218504  , -0.02390525, -0.22890375, -0.0553469 ,  0.121794  ,\n",
       "        0.2539025 , -0.11285   ,  0.1770085 , -0.1155125 ,  0.168193  ,\n",
       "       -0.33144025,  0.27296   ,  0.249299  , -0.16557675, -0.1912925 ,\n",
       "        0.05435875, -0.00939575,  0.095414  ,  0.133353  ,  0.06165925,\n",
       "        0.10616925, -0.03185533, -0.0798    , -0.1310175 ,  0.13893625,\n",
       "       -0.037293  ,  0.0274245 ,  0.17947275, -0.170901  , -0.11313075,\n",
       "        0.1890075 ,  0.02558   , -0.15583525, -0.16438775, -0.24236575,\n",
       "       -0.04736875,  0.099035  ,  0.3570125 , -0.024006  , -0.07023675,\n",
       "        0.17954475, -0.047761  ,  0.22203575,  0.0195949 , -0.04717675,\n",
       "       -0.12089575, -0.1932675 ,  0.17969605, -0.11974425, -0.178085  ,\n",
       "       -0.095766  , -0.09010075,  0.099935  , -0.1864965 , -0.2858065 ,\n",
       "       -0.1715525 , -0.0198295 ,  0.05794125,  0.2428925 , -0.17010075,\n",
       "        0.0464525 , -0.00994725,  0.3016375 , -0.0415575 , -0.003737  ,\n",
       "       -0.49803425, -0.219047  , -0.2864675 ,  0.128804  ,  0.020335  ,\n",
       "        0.088846  , -0.2551375 ,  0.269483  ,  0.09836935,  0.21806725,\n",
       "       -0.060069  , -0.0569535 , -0.13823275,  0.04563475,  0.1685165 ,\n",
       "        0.01614025, -0.08252825,  0.3234862 , -0.22474925, -0.00410725,\n",
       "        0.1158215 , -0.08104225,  0.08919977, -0.2255275 ,  0.045825  ,\n",
       "       -0.200837  ,  0.132655  , -0.1231865 ,  0.1293015 ,  0.3083375 ,\n",
       "       -0.0858995 ,  0.07201275,  0.3174835 ,  0.1953425 ,  0.09540025,\n",
       "       -0.0903795 , -0.0408705 , -0.24232575,  0.245372  , -0.000848  ,\n",
       "       -0.07329625, -0.052374  ,  0.18440165,  0.04020675, -0.39104425,\n",
       "       -0.0381715 , -0.10333925, -0.1837425 ,  0.15757275,  0.17396   ,\n",
       "        0.1038    , -0.317195  ,  0.107683  ,  0.4052075 ,  0.02518517,\n",
       "        0.0465055 ,  0.41061955,  0.42775   , -0.094856  ,  0.081255  ,\n",
       "        0.24593175,  0.20701675,  0.044483  , -0.1206845 , -0.11249   ,\n",
       "       -0.252171  , -0.07287175,  0.19054575, -0.0165105 ,  0.14946675,\n",
       "        0.0313605 , -0.335225  ,  0.35763   ,  0.0857636 , -0.03823825,\n",
       "        0.16153525,  0.231435  ,  0.17895717,  0.07524375, -0.24841   ,\n",
       "       -0.21238825,  0.04073675, -0.10946125, -0.4971075 ,  0.034789  ,\n",
       "        0.0999665 , -0.475035  , -0.24878   ,  0.26459175,  0.249982  ,\n",
       "       -0.09103575,  0.27316625,  0.11134775, -0.11024763, -0.2770325 ,\n",
       "        0.17938   , -0.04408075, -0.07188975,  0.0832605 ,  0.0150495 ,\n",
       "       -0.21188325, -0.331546  ,  0.105401  ,  0.2083925 , -0.08780325,\n",
       "        0.05595675, -0.03858825, -0.10098575,  0.01883325, -0.0459475 ,\n",
       "        0.00679575, -0.06121675,  0.165537  , -0.13060477,  0.13749775,\n",
       "       -0.019874  , -0.0604845 ,  0.220408  , -0.07513   ,  0.0822575 ,\n",
       "        0.20919275,  0.22457   , -0.34078   ,  0.014645  ,  0.387305  ,\n",
       "        0.04031325, -0.104804  , -0.10973925,  0.2620084 ,  0.33702   ,\n",
       "        0.03616075, -0.12633175, -0.0763705 ,  0.03728   ,  0.14871425,\n",
       "       -0.121865  ,  0.05479675, -0.1937145 , -0.1069045 , -0.20722   ,\n",
       "        0.1264935 ,  0.3184775 ,  0.02849   ,  0.07662075, -0.20710597,\n",
       "       -0.11315   ,  0.063827  ,  0.111254  , -0.08598275, -0.02843675,\n",
       "        0.06352   ,  0.069928  , -0.05209925,  0.05096325, -0.2405555 ,\n",
       "        0.1561363 ,  0.06041025,  0.08369067,  0.159265  ,  0.0336795 ,\n",
       "        0.53237   ,  0.13729118,  0.22986425,  0.12999475,  0.03776   ,\n",
       "       -0.03644995, -0.051285  ,  0.02367297, -0.27929175,  0.10737792,\n",
       "       -0.109085  ,  0.15809725, -0.1740375 ,  0.18897475, -0.24618575,\n",
       "       -0.01581549, -0.213302  , -0.0898695 ,  0.20587325, -0.02704   ,\n",
       "       -0.22437   ,  0.3087115 , -0.11175925, -0.1323905 , -0.02537575,\n",
       "        0.22788073, -0.03321325, -0.3732625 , -0.3534675 ,  0.1767995 ,\n",
       "       -0.1619145 , -0.14378875, -0.12050625, -0.202495  , -0.001895  ,\n",
       "        0.05466173, -0.17972325, -0.1908425 , -0.1303605 , -0.17344375,\n",
       "       -0.00620075,  0.11718   ,  0.16595775, -0.3984185 ,  0.145045  ,\n",
       "       -0.07642   , -0.236464  , -0.14154997,  0.13981325,  0.1738295 ,\n",
       "        0.14548848,  0.143385  ,  0.2310225 , -0.136631  ,  0.33019675,\n",
       "        0.3940475 , -0.33323   ,  0.18864325,  0.05132025, -0.00659345,\n",
       "       -0.0814225 , -0.26325975, -0.003216  ,  0.1948275 ,  0.098341  ,\n",
       "       -0.17755   , -0.17721   , -0.10578575,  0.03220975,  0.16474324,\n",
       "       -0.008346  , -0.13190725, -0.13212875, -0.110885  ,  0.36881425,\n",
       "        0.172995  ,  0.0522425 , -0.0360525 ,  0.09090115, -0.27958   ,\n",
       "        0.21503175, -0.1424815 , -0.15036425,  0.20665   ,  0.05728058,\n",
       "        0.055789  , -0.15366033, -0.4601225 , -0.098141  , -0.11554275,\n",
       "       -0.08375475,  0.2039315 , -0.615165  ,  0.12362825,  0.049995  ,\n",
       "        0.291968  ,  0.131322  , -0.13960225, -0.19387775, -0.24182375,\n",
       "        0.10017675, -0.281865  ,  0.047795  ,  0.157055  ,  0.05487913,\n",
       "        0.0480635 ,  0.053541  , -0.1729825 ,  0.0446755 ,  0.21156275,\n",
       "        0.05058675, -0.1501965 , -0.2792035 , -0.043165  ,  0.118435  ,\n",
       "        0.126735  ,  0.08273687,  0.01604525, -0.09716875, -0.289955  ,\n",
       "        0.233492  , -0.2584825 ,  0.29455425,  0.4167575 ,  0.03280875,\n",
       "       -0.013945  , -0.0093709 ,  0.08817225, -0.2580825 ,  0.07756325,\n",
       "        0.17482425,  0.3610625 , -0.15955   ,  0.102855  ,  0.05887275,\n",
       "        0.04283775,  0.0747455 ,  0.1878981 ,  0.2888505 , -0.112699  ,\n",
       "        0.3494225 , -0.011258  ,  0.2289975 , -0.081714  ,  0.24652925,\n",
       "        0.19155475,  0.13093525,  0.02352125, -0.0896935 ,  0.01994975,\n",
       "       -0.01903525,  0.2849125 ,  0.11416   , -0.05258997, -0.0813095 ,\n",
       "        0.30936   , -0.024576  , -0.14554   ,  0.06891053,  0.08403275,\n",
       "       -0.07474075,  0.11407075,  0.07072425,  0.47444   ,  0.12004608,\n",
       "        0.152793  ,  0.3837825 , -0.11909   ,  0.04653075,  0.030118  ,\n",
       "        0.0378049 , -0.30659125, -0.18053   ,  0.01019255, -0.23811575,\n",
       "        0.022717  ,  0.14446745, -0.3380175 , -0.00190055, -0.003744  ,\n",
       "       -0.401925  , -0.2117225 ,  0.1372555 , -0.09267525,  0.2353495 ,\n",
       "        0.07725425, -0.05000425,  0.04339   , -0.1374025 ,  0.00451   ,\n",
       "       -0.17284575,  0.01517077,  0.08274775,  0.04938525, -0.17645337,\n",
       "        0.07154575,  0.08667175, -0.0285368 ,  0.012785  , -0.095527  ,\n",
       "        0.167831  , -0.09919225,  0.001834  , -0.03018645, -0.1362352 ,\n",
       "       -0.126976  ,  0.2871075 ,  0.02317738, -0.3081225 , -0.0314845 ,\n",
       "        0.163225  , -0.04701125,  0.1586538 ,  0.0132255 , -0.1142945 ,\n",
       "        0.05420475, -0.128369  , -0.083676  ,  0.24446775, -0.0965655 ])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_vectors[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20000"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(train_vectors)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "content_vec = pd.DataFrame({'sent2vec': train_vectors})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sent2vec</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>[-0.15006825000000001, 0.043590000000000004, -...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>[0.19403659999999998, 0.0330432, -0.0985924, 0...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>[0.0205025, 0.05188675, 0.06580325000000001, -...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>[0.11343225, 0.07983315, -0.02105195, -0.29834...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>[0.04651425, -0.06510175, 0.12970225, -0.10283...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                            sent2vec\n",
       "0  [-0.15006825000000001, 0.043590000000000004, -...\n",
       "1  [0.19403659999999998, 0.0330432, -0.0985924, 0...\n",
       "2  [0.0205025, 0.05188675, 0.06580325000000001, -...\n",
       "3  [0.11343225, 0.07983315, -0.02105195, -0.29834...\n",
       "4  [0.04651425, -0.06510175, 0.12970225, -0.10283..."
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "content_vec.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_train_df = pd.concat([content_vec.reset_index(drop=True), train_df.reset_index(drop=True)], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sent2vec</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>review content</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>[-0.15006825000000001, 0.043590000000000004, -...</td>\n",
       "      <td>0</td>\n",
       "      <td>A simple  clean style. These shoes are exactly...</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>[0.19403659999999998, 0.0330432, -0.0985924, 0...</td>\n",
       "      <td>1</td>\n",
       "      <td>My feet love these  sandals . Am on my fourth ...</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>[0.0205025, 0.05188675, 0.06580325000000001, -...</td>\n",
       "      <td>2</td>\n",
       "      <td>They are cute. I had to return them because th...</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>[0.11343225, 0.07983315, -0.02105195, -0.29834...</td>\n",
       "      <td>3</td>\n",
       "      <td>This sandal is pretty comfy. I could have used...</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>[0.04651425, -0.06510175, 0.12970225, -0.10283...</td>\n",
       "      <td>4</td>\n",
       "      <td>Love these adorable  wedges . They are worth t...</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                            sent2vec  Unnamed: 0  \\\n",
       "0  [-0.15006825000000001, 0.043590000000000004, -...           0   \n",
       "1  [0.19403659999999998, 0.0330432, -0.0985924, 0...           1   \n",
       "2  [0.0205025, 0.05188675, 0.06580325000000001, -...           2   \n",
       "3  [0.11343225, 0.07983315, -0.02105195, -0.29834...           3   \n",
       "4  [0.04651425, -0.06510175, 0.12970225, -0.10283...           4   \n",
       "\n",
       "                                      review content  rating  \n",
       "0  A simple  clean style. These shoes are exactly...       5  \n",
       "1  My feet love these  sandals . Am on my fourth ...       5  \n",
       "2  They are cute. I had to return them because th...       4  \n",
       "3  This sandal is pretty comfy. I could have used...       5  \n",
       "4  Love these adorable  wedges . They are worth t...       5  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_train_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_train_df.to_csv('../dataset/shoes/pretrained-s2v-valtest.csv')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
